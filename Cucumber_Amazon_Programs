package com.listeners;

import java.io.File;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;
import com.aventstack.extentreports.reporter.configuration.ChartLocation;
import com.aventstack.extentreports.reporter.configuration.Theme;

public class ExtentManager {

	 private static ExtentReports extent;
	    private static String reportFileName = "Test-Automation-Report"+".html";
	    private static String fileSeperator = System.getProperty("file.separator");
	    private static String reportFilepath = System.getProperty("user.dir") +fileSeperator+ "TestReport";
	    private static String reportFileLocation =  reportFilepath +fileSeperator+ reportFileName;
	  
	 
	    public static ExtentReports getInstance() {
	        if (extent == null)
	            createInstance();
	        return extent;
	    }
	 
	    //Create an extent report instance
	    public static ExtentReports createInstance() {
	        String fileName = getReportPath(reportFilepath);
	       
	        ExtentHtmlReporter htmlReporter = new ExtentHtmlReporter(fileName);
	        htmlReporter.config().setTestViewChartLocation(ChartLocation.TOP);
	        htmlReporter.config().setChartVisibilityOnOpen(true);
	        htmlReporter.config().setTheme(Theme.STANDARD);
	        htmlReporter.config().setDocumentTitle(reportFileName);
	        htmlReporter.config().setEncoding("utf-8");
	        htmlReporter.config().setReportName(reportFileName);
	        htmlReporter.config().setTimeStampFormat("EEEE, MMMM dd, yyyy, hh:mm a '('zzz')'");
	 
	        extent = new ExtentReports();
	        extent.attachReporter(htmlReporter);
	        //Set environment details
			extent.setSystemInfo("OS", "Windows");
			extent.setSystemInfo("AUT", "QA");
	 
	        return extent;
	    }
	     
	    //Create the report path
	    private static String getReportPath (String path) {
	    	File testDirectory = new File(path);
	        if (!testDirectory.exists()) {
	        	if (testDirectory.mkdir()) {
	                System.out.println("Directory: " + path + " is created!" );
	                return reportFileLocation;
	            } else {
	                System.out.println("Failed to create directory: " + path);
	                return System.getProperty("user.dir");
	            }
	        } else {
	            System.out.println("Directory already exists: " + path);
	        }
			return reportFileLocation;
	    }

}

package com.listeners;

import java.util.HashMap;
import java.util.Map;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;

public class ExtentTestManager {
	
	static Map<Integer, ExtentTest> extentTestMap = new HashMap<Integer, ExtentTest>();
	static ExtentReports extent = ExtentManager.getInstance();

	public static synchronized ExtentTest getTest() {
		return (ExtentTest) extentTestMap.get((int) (long) (Thread.currentThread().getId()));
	}

	public static synchronized void endTest() {
		extent.flush();
	}

	public static synchronized ExtentTest startTest(String testName) {
		ExtentTest test = extent.createTest(testName);
		extentTestMap.put((int) (long) (Thread.currentThread().getId()), test);
		return test;
	}

}

package com.listeners;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.SimpleDateFormat;

import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.io.FileHandler;
import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;

import com.aventstack.extentreports.MediaEntityBuilder;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.model.Log;

import org.apache.log4j.Logger;

public class TestListener implements ITestListener {
	private static Logger log = Logger.getLogger(Log.class.getName());
	
	public void onStart(ITestContext context) {
		System.out.println("*** Test Suite " + context.getName() + " started ***");
	}

	public void onFinish(ITestContext context) {
		System.out.println(("*** Test Suite " + context.getName() + " ending ***"));
		ExtentTestManager.endTest();
		ExtentManager.getInstance().flush();
	}

	public void onTestStart(ITestResult result) {
		System.out.println(("*** Running test method " + result.getMethod().getMethodName() + "..."));
		ExtentTestManager.startTest(result.getMethod().getMethodName());
	}

	public void onTestSuccess(ITestResult result) {
		System.out.println("*** Executed " + result.getMethod().getMethodName() + " test successfully...");
		ExtentTestManager.getTest().log(Status.PASS, "Test passed");
	}

	public void onTestFailure(ITestResult result) {
		log.info("*** Test execution " + result.getMethod().getMethodName() + " failed...");
		log.info((result.getMethod().getMethodName() + " failed!"));

		//ITestContext context = result.getTestContext();
		WebDriver driver = (WebDriver) result.getTestContext().getAttribute("driver");

		String targetLocation = null;

		String testClassName = result.getInstanceName().trim();
		String timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new java.util.Date()); // get timestamp
		String testMethodName = result.getName().toString().trim();
		String screenShotName = testMethodName + timeStamp + ".png";
		String fileSeperator = System.getProperty("file.separator");
		String reportsPath = System.getProperty("user.dir") + fileSeperator + "TestReport" + fileSeperator
				+ "screenshots";
		log.info("Screen shots reports path - " + reportsPath);
		try {
			File file = new File(reportsPath + fileSeperator + testClassName); // Set
																				// screenshots
																				// folder
			if (!file.exists()) {
				if (file.mkdirs()) {
					log.info("Directory: " + file.getAbsolutePath() + " is created!");
				} else {
					log.info("Failed to create directory: " + file.getAbsolutePath());
				}

			}

			File screenshotFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
			targetLocation = reportsPath + fileSeperator + testClassName + fileSeperator + screenShotName;// define
																											// location
			File targetFile = new File(targetLocation);
			log.info("Screen shot file location - " + screenshotFile.getAbsolutePath());
			log.info("Target File location - " + targetFile.getAbsolutePath());
			FileHandler.copy(screenshotFile, targetFile);

		} catch (FileNotFoundException e) {
			log.info("File not found exception occurred while taking screenshot " + e.getMessage());
		} catch (Exception e) {
			log.info("An exception occurred while taking screenshot " + e.getCause());
		}

		// attach screenshots to report
		try {
			ExtentTestManager.getTest().fail("Screenshot",
					MediaEntityBuilder.createScreenCaptureFromPath(targetLocation).build());
		} catch (IOException e) {
			log.info("An exception occured while taking screenshot " + e.getCause());
		}
		ExtentTestManager.getTest().log(Status.FAIL, "Test Failed");
	}

	public void onTestSkipped(ITestResult result) {
		System.out.println("*** Test " + result.getMethod().getMethodName() + " skipped...");
		ExtentTestManager.getTest().log(Status.SKIP, "Test Skipped");
	}

	public void onTestFailedButWithinSuccessPercentage(ITestResult result) {
		System.out.println("*** Test failed but within percentage % " + result.getMethod().getMethodName());
	}
}

package in.amazon.pages;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class AllMobileBrands {
private Actions actions;
	
	@FindBy(linkText = "Mobiles & Accessories")
	private WebElement mobilesAndAccessories;
		
	@FindBy(linkText = "Apple")
	private static WebElement apple;
	
	public AllMobileBrands(WebDriver driver) {
		PageFactory.initElements(driver, this);
		actions = new Actions(driver);
	}

	public void hoverOverMobilesAndAccessories() {
		actions.moveToElement(mobilesAndAccessories).build().perform();
	}
	public void clickApple() {
		apple.click();
	}
}


package in.amazon.pages;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class ApplePhones {
	@FindBy(xpath = "(//div[contains(@class,'card-containe')])[2]")
	private WebElement secondMobile;
	
	
	public ApplePhones(WebDriver driver) {
		PageFactory.initElements(driver, this);
	}
public void clickSecondMobile() {
	secondMobile.click();
}


package in.amazon.pages;

import org.openqa.selenium.WebDriver;

import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class BuyPhone {
	@FindBy(id ="buy-now-button")
	private WebElement buyNowBtn;
	
	public BuyPhone(WebDriver driver) {
		PageFactory.initElements(driver, this);
	}
	public void clickBuyNowBtn() {
		buyNowBtn.click();
	}
}

package in.amazon.pages;

import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class LandingPage {
	//Locator of the web-elements on Landing page of amazon
		//private WebElement mobiles = driver.findElement(By.linkText("Mobiles"));
		//mobiles.click();
		
		private Actions actions;
		
		@FindBy(linkText="Mobiles")
		private WebElement mobiles;
		
		@FindBy(id = "nav-link-accountList")
		private WebElement signInMenu;
		
		@FindBy(linkText = "Sign in")
		private WebElement signInBtn;
		
		
		public LandingPage(WebDriver driver) {
			PageFactory.initElements(driver,this);
			actions = new Actions(driver);
		}
		
		
		public void clickMoblies() {
			mobiles.click();
		}
		
		public void hoverOverHelloSignInMenu() {
			actions.moveToElement(signInMenu).build().perform();
			
		}
		public void clickSignInBtn() {
			signInBtn.click();
		}
	    
			
		}

package in.amazon.pages;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class SignIn {
	@FindBy(xpath="//h1[contains(@class,'small')]")
    private WebElement signInText;
    
    @FindBy(id = "ap_email")
    private WebElement emailTextBox;
    
    @FindBy(id = "continue")
    private WebElement continueBtn;
    
    @FindBy(xpath = "//span[contains(@class,'a-list-item')]")
    private WebElement errMsg;

    public SignIn(WebDriver driver) {
   	 PageFactory.initElements(driver,this);
   	 
    }
public String getSignInText() {
	String text = signInText.getText();
	return text;
}

public void enterEmail(String email) {
	emailTextBox.clear();
	emailTextBox.sendKeys(email);
}

public void clickContinueBtn() {
	continueBtn.click();
}
public String getErrMsg() {
	String message = errMsg.getText();
	return message;
}
}

package in.amazon.teststeps;

import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.Scenario;

public class BeforeAfter extends Tools{
	
	@Before
	public void setUp(Scenario scenario) {
		Driver.init();
	}
	
	@After
	public void tearDown() {
		driver.quit();
	}

}

package in.amazon.teststeps;

import static org.testng.Assert.assertTrue;



import java.util.ArrayList;

import org.testng.Assert;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

public class BuyMobilePhoneSteps extends Driver{
	
	
	@Given("a user is on the landing page of Amazon")
	public void a_user_is_on_the_landing_page_of_amazon() {
		
		assertTrue(driver.getTitle().equals("Online Shopping site in India: Shop Online for Mobiles, Books, Watches, Shoes and More - Amazon.in"));  
	}

	@When("he clicks on Mobiles in the navigation bar")
	public void he_clicks_on_mobiles_in_the_navigation_bar() {
	    landingpage.clickMoblies();
	}

	@When("he hovers the pointer over Mobiles & Accessories")
	public void he_hovers_the_pointer_over_mobiles_accessories() {
	   allMobileBrands.hoverOverMobilesAndAccessories();
	}

	@When("he clicks on Apple in the sub-menu")
	public void he_clicks_on_apple_in_the_sub_menu(){
		allMobileBrands.clickApple();
	}

	@When("he clicks on the second available phone")
	public void he_clicks_on_the_second_available_phone() throws InterruptedException { 
	   applePhones.clickSecondMobile();
	}

	@When("he switches focus on the new tab")
	public void he_switches_focus_on_the_new_tab() {
	    ArrayList<String> tabs = new ArrayList<>(driver.getWindowHandles());
	    driver.switchTo().window(tabs.get(1));
	}

	@When("he clicks on Buy Now button")
	public void he_clicks_on_buy_now_button() { 
	   buyPhone.clickBuyNowBtn();
	}

	@Then("he must be able to purchase the mobile phone successfully")
	public void he_must_be_able_to_purchase_the_mobile_phone_successfully() {
		
	    String expectedText = "Sign in";
	    String actualText = signIn.getSignInText();
	    Assert.assertEquals(actualText, expectedText);
	}
}

package in.amazon.teststeps;

import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;


import org.openqa.selenium.chrome.ChromeDriver;

import in.amazon.pages.AllMobileBrands;
import in.amazon.pages.ApplePhones;
import in.amazon.pages.BuyPhone;
import in.amazon.pages.LandingPage;
import in.amazon.pages.SignIn;


public class Driver extends Tools{
	protected static AllMobileBrands allMobileBrands;
	protected static LandingPage landingpage;
	protected static ApplePhones applePhones;
	protected static BuyPhone buyPhone;
	protected static SignIn signIn;

	
	public static void init() {
		driver = new ChromeDriver();
			driver.manage().window().maximize();
			driver.get("https://amazon.in");
			allMobileBrands = new AllMobileBrands(driver);
			landingpage = new LandingPage(driver);
			applePhones = new ApplePhones(driver);
			buyPhone = new  BuyPhone(driver);
			signIn = new SignIn(driver);
	
			
	}

}

package in.amazon.teststeps;

import io.cucumber.testng.AbstractTestNGCucumberTests;


import io.cucumber.testng.CucumberOptions;

@CucumberOptions(
		features = "Features",
		glue = "in.amazon.teststeps",
		//dryRun true
		tags = "@product_purchase or login_functionality"
		)

public class TestRunner extends AbstractTestNGCucumberTests{
	
}

package in.amazon.teststeps;

import org.openqa.selenium.WebDriver;

public class Tools { 
	
	protected static WebDriver driver;
    
}

package in.amazon.teststeps;



import static org.testng.Assert.assertTrue;

import org.testng.Assert;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

public class VerifyErrorMessageSteps extends Driver {
	
	@Given("a user is on the landing page")
	public void a_user_is_on_the_landing_page() {
		//Long form
		// String expectedTitle = "Online Shopping site in India: Shop Online for Mobiles, Books, Watches, Shoes and More - Amazon.in"
		// String actualTitle = driver.getTitle();
		// Assert.assertEquals(actualTitle, expectedTitle);
		
	assertTrue(driver.getTitle().equals("Online Shopping site in India: Shop Online for Mobiles, Books, Watches, Shoes and More - Amazon.in"));
	}

	@When("he hovers the pointer over Hello Sign-in menu")
	public void he_hovers_the_pointer_over_hello_sign_in_menu() {
	    landingpage.hoverOverHelloSignInMenu();
	}

	@When("he clicks on Sign-in button in the sub-menu")
	public void he_clicks_on_sign_in_button_in_the_sub_menu() {
	    landingpage.clickSignInBtn();
	}

	@When("he enters invalid email adress in the Email text-box")
	public void he_enters_invalid_email_adress_in_the_email_text_box() {
	    signIn.enterEmail("batman5544@gmail.com");
	}

	@When("he clicks on Continue button")
	public void he_clicks_on_continue_button() {
	    signIn.clickContinueBtn();
	}

	@Then("he must see the error message - {string}")
	public void he_must_see_the_error_message(String string) {
	    String expectedErrMsg = string;
	    String actualErrMsg = signIn.getErrMsg();
	    Assert.assertEquals(actualErrMsg, expectedErrMsg);
	}
	@When("he enters an invalid email address {string} in the Email text-box")
	public void he_enters_an_invalid_email_address_in_the_email_text_box(String string) {
	    signIn.enterEmail(string);
	
	}}




